import React, { Component } from 'react';
import { ActivityIndicator, AsyncStorage, TouchableOpacity, FlatList, StyleSheet,
        Text, View } from 'react-native';
import flatListData from '../data/flatListData';


class FlatListItem extends Component {

  componentDidMount() {
    console.log("FlatListItem componentDidMount")  
  };

  render() {
    //console.log("From FlatListItem: ", this.props.item.kolesterol);
    //console.log("From FlatListItem: ", this.props.item);
    return (
      <View style={{
        flex: 1,
        backgroundColor: this.props.index % 2 == 0 ? '#fdfdfd' : '#990000'  
      }}>
        <View style={styles.rowsContainer}>
            <Text style={[styles.flatListItem, styles.solar]}>
              {this.props.item.analysis}</Text>
            <Text style={[styles.flatListItem, styles.solar]}>
              {this.props.item.result}</Text>
        </View>
      </View>
    );  
  }  
}

export default class BasicFlatList extends Component {

  constructor(props) {
    super(props);
    this.state={
      isLoading: true,
      dataSource: [] 
    }
  };

  componentDidMount() {
    console.log("BasicFlatList componentDidMount")  
    this._displayData();
  };

  _displayData = async() => {
    try {
        //alert("Button Pressed");
        const keys = await AsyncStorage.getAllKeys()
        if (keys.length<1) {
          console.log("keys empty");
        }
        console.log("getAllKeys: ", keys);
        let filtered = [];
        //const keyNrarray = [];
        let keysSorted = [];
        const values = [];
        //const unparsedValues = [];
        const keyArray = [];
        const remove = ["nextKey", "nextId", "latestKey"]

        filtered = keys.filter(
          function(value) {
            return this.indexOf(value) < 0;
          },
          remove
        );
        //console.log("filtered: ", filtered);

        keysSorted = filtered.sort(function(a, b){return a-b});
        //console.log("keysSorted: ", keysSorted);

        //keyNrArray = filtered.map(Number);
        //console.log("keyNrArray: ", keyNrArray);

        /*
        const items = await AsyncStorage.multiGet((keysSorted), (error, stores) => {
        stores.map((result, i, store) => {
          //console.log("stores: ", stores);
          //console.log("result", result);
          //console.log("i",i);
          //console.log("store", store);
          let key = store[i][0];
          console.log("key: ", key);
          keyArray.push(key);
          let value = JSON.parse(store[i][1]);
          //let unparsedValue = store[i][1];
          values.push(value);
          //unparsedValues.push(unparsedValue);
          console.log("value: ", value);  
          //console.log("unparsedValue: ", unparsedValue);  
          //keyNrArray = keysSortedArray.map(Number);
          //console.log("keyNrArray: ", keyNrArray);
        });
        });
        //console.log("items: ", items);
        //console.log("items typeof: ", typeof(items));
        //const latestKey = keyNrArray.slice(-1)[0];
        */

        const items = await AsyncStorage.multiGet(keysSorted);
        console.log("items: ", items[0][1]);

        const latestKey = await AsyncStorage.getItem('latestKey');
        console.log("values: ", values);
        //console.log("unparsedValues: ", unparsedValues);

        console.log("latestKey: ", latestKey);
        const latestValues = await AsyncStorage.getItem(latestKey.toString());
        //console.log("latest values: ", latestValues);
        //console.log("latest parsed values: ", JSON.parse(latestValues));

        const dataSource = JSON.parse(latestValues);
        //const dataSource = JSON.parse(items[1][1]);
        console.log("dataSource: ", dataSource);
        //console.log("values[5]: ", values[5].kolesterol);
        this.setState ({
          isLoading: false,
          dataSource: dataSource,  
        });
    }

    catch(error) {
      console.log("error _displayData: ", error);  
    }
  }

  render() {
    if(this.state.isLoading) {
      return(
        <View style={{flex: 1, padding: 50}}>
          <ActivityIndicator size='large' />
        </View>
      );
    }
    return (
      <View style={styles.container}>
        <View style={styles.topContainer}>
          <TouchableOpacity
            style={styles.btn}
            onPress={this._displayData}>
            <Text>Display stored data</Text>
          </TouchableOpacity>
        </View>
        <View style={styles.flatListContainer}>
          <FlatList
            data={this.state.dataSource}
            keyExtractor={item => item.id.toString()}
            renderItem={({item}) => {
            //console.log("Item =", JSON.stringify(item), "index =", item.id);
            //console.log("item =", item, "index =", item.id);
            //console.log("item.kolesterol =", item.kolesterol, "index =", item.id);
              return (
                <FlatListItem
                  item={item}
                  index={item.id}
                />
              );
            }}
            >
          </FlatList>
        </View>
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    marginTop: 30,
    backgroundColor: '#fdfdfd',
    alignItems: 'stretch',
    //justifyContent: 'flex-end',
  },
  rows: {
    flex: 1,
    //backgroundColor: this.props.index % 2 == 0 ? 'green' : 'grey'  
  },
  topContainer: {
    flex: 1,
    borderBottomWidth: 2,
    //borderBottomColor: 'black',
  },
  flatListContainer: {
    flex: 2,
    justifyContent: 'flex-start',
  },
  flatListItem: {
    //color: "white",
    padding: 10,
    fontSize: 16  
  },
  rowsContainer: {
    flex: 1,
    flexDirection: "row", 
  },
  param: {
    flex: 2,
    textAlign: "left",
    alignItems: "center",
  },
  solar: {
    flex: 3,
    textAlign: "left",  
    alignItems: "center",
  },
  btn: {
    //flex: 1,
    alignSelf: 'center',
    //backgroundColor: '#01c853',  
    backgroundColor: '#008000',  
    padding: 10,
    alignItems: 'center',
    marginBottom: 30,
    width: 200,
    borderRadius: 10,
  },
});
